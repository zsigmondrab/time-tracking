/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.liferay.timetracking.dayoffs.model.impl;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.SystemException;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;
import com.liferay.portal.util.PortalUtil;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import com.liferay.timetracking.dayoffs.model.DaysOffCounter;
import com.liferay.timetracking.dayoffs.model.DaysOffCounterModel;
import com.liferay.timetracking.dayoffs.model.DaysOffCounterSoap;

import java.io.Serializable;

import java.sql.Types;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * The base model implementation for the DaysOffCounter service. Represents a row in the &quot;TimeTracking_DaysOffCounter&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.liferay.timetracking.dayoffs.model.DaysOffCounterModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link DaysOffCounterImpl}.
 * </p>
 *
 * @author Laszlo Hudak
 * @see DaysOffCounterImpl
 * @see com.liferay.timetracking.dayoffs.model.DaysOffCounter
 * @see com.liferay.timetracking.dayoffs.model.DaysOffCounterModel
 * @generated
 */
@JSON(strict = true)
public class DaysOffCounterModelImpl extends BaseModelImpl<DaysOffCounter>
	implements DaysOffCounterModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a days off counter model instance should use the {@link com.liferay.timetracking.dayoffs.model.DaysOffCounter} interface instead.
	 */
	public static final String TABLE_NAME = "TimeTracking_DaysOffCounter";
	public static final Object[][] TABLE_COLUMNS = {
			{ "dayOffCounterId", Types.BIGINT },
			{ "companyId", Types.BIGINT },
			{ "userId", Types.BIGINT },
			{ "userName", Types.VARCHAR },
			{ "createDate", Types.TIMESTAMP },
			{ "modifiedDate", Types.TIMESTAMP },
			{ "workerUserId", Types.BIGINT },
			{ "workerUserName", Types.VARCHAR },
			{ "ruleId", Types.BIGINT },
			{ "year", Types.INTEGER },
			{ "allDays", Types.INTEGER },
			{ "remainingDays", Types.INTEGER }
		};
	public static final String TABLE_SQL_CREATE = "create table TimeTracking_DaysOffCounter (dayOffCounterId LONG not null primary key,companyId LONG,userId LONG,userName VARCHAR(75) null,createDate DATE null,modifiedDate DATE null,workerUserId LONG,workerUserName VARCHAR(75) null,ruleId LONG,year INTEGER,allDays INTEGER,remainingDays INTEGER)";
	public static final String TABLE_SQL_DROP = "drop table TimeTracking_DaysOffCounter";
	public static final String ORDER_BY_JPQL = " ORDER BY daysOffCounter.workerUserName ASC";
	public static final String ORDER_BY_SQL = " ORDER BY TimeTracking_DaysOffCounter.workerUserName ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.liferay.timetracking.dayoffs.model.DaysOffCounter"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.liferay.timetracking.dayoffs.model.DaysOffCounter"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.liferay.timetracking.dayoffs.model.DaysOffCounter"),
			true);
	public static long ALLDAYS_COLUMN_BITMASK = 1L;
	public static long REMAININGDAYS_COLUMN_BITMASK = 2L;
	public static long RULEID_COLUMN_BITMASK = 4L;
	public static long WORKERUSERID_COLUMN_BITMASK = 8L;
	public static long WORKERUSERNAME_COLUMN_BITMASK = 16L;
	public static long YEAR_COLUMN_BITMASK = 32L;

	/**
	 * Converts the soap model instance into a normal model instance.
	 *
	 * @param soapModel the soap model instance to convert
	 * @return the normal model instance
	 */
	public static DaysOffCounter toModel(DaysOffCounterSoap soapModel) {
		if (soapModel == null) {
			return null;
		}

		DaysOffCounter model = new DaysOffCounterImpl();

		model.setDayOffCounterId(soapModel.getDayOffCounterId());
		model.setCompanyId(soapModel.getCompanyId());
		model.setUserId(soapModel.getUserId());
		model.setUserName(soapModel.getUserName());
		model.setCreateDate(soapModel.getCreateDate());
		model.setModifiedDate(soapModel.getModifiedDate());
		model.setWorkerUserId(soapModel.getWorkerUserId());
		model.setWorkerUserName(soapModel.getWorkerUserName());
		model.setRuleId(soapModel.getRuleId());
		model.setYear(soapModel.getYear());
		model.setAllDays(soapModel.getAllDays());
		model.setRemainingDays(soapModel.getRemainingDays());

		return model;
	}

	/**
	 * Converts the soap model instances into normal model instances.
	 *
	 * @param soapModels the soap model instances to convert
	 * @return the normal model instances
	 */
	public static List<DaysOffCounter> toModels(DaysOffCounterSoap[] soapModels) {
		if (soapModels == null) {
			return null;
		}

		List<DaysOffCounter> models = new ArrayList<DaysOffCounter>(soapModels.length);

		for (DaysOffCounterSoap soapModel : soapModels) {
			models.add(toModel(soapModel));
		}

		return models;
	}

	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.liferay.timetracking.dayoffs.model.DaysOffCounter"));

	public DaysOffCounterModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _dayOffCounterId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setDayOffCounterId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _dayOffCounterId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return DaysOffCounter.class;
	}

	@Override
	public String getModelClassName() {
		return DaysOffCounter.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("dayOffCounterId", getDayOffCounterId());
		attributes.put("companyId", getCompanyId());
		attributes.put("userId", getUserId());
		attributes.put("userName", getUserName());
		attributes.put("createDate", getCreateDate());
		attributes.put("modifiedDate", getModifiedDate());
		attributes.put("workerUserId", getWorkerUserId());
		attributes.put("workerUserName", getWorkerUserName());
		attributes.put("ruleId", getRuleId());
		attributes.put("year", getYear());
		attributes.put("allDays", getAllDays());
		attributes.put("remainingDays", getRemainingDays());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long dayOffCounterId = (Long)attributes.get("dayOffCounterId");

		if (dayOffCounterId != null) {
			setDayOffCounterId(dayOffCounterId);
		}

		Long companyId = (Long)attributes.get("companyId");

		if (companyId != null) {
			setCompanyId(companyId);
		}

		Long userId = (Long)attributes.get("userId");

		if (userId != null) {
			setUserId(userId);
		}

		String userName = (String)attributes.get("userName");

		if (userName != null) {
			setUserName(userName);
		}

		Date createDate = (Date)attributes.get("createDate");

		if (createDate != null) {
			setCreateDate(createDate);
		}

		Date modifiedDate = (Date)attributes.get("modifiedDate");

		if (modifiedDate != null) {
			setModifiedDate(modifiedDate);
		}

		Long workerUserId = (Long)attributes.get("workerUserId");

		if (workerUserId != null) {
			setWorkerUserId(workerUserId);
		}

		String workerUserName = (String)attributes.get("workerUserName");

		if (workerUserName != null) {
			setWorkerUserName(workerUserName);
		}

		Long ruleId = (Long)attributes.get("ruleId");

		if (ruleId != null) {
			setRuleId(ruleId);
		}

		Integer year = (Integer)attributes.get("year");

		if (year != null) {
			setYear(year);
		}

		Integer allDays = (Integer)attributes.get("allDays");

		if (allDays != null) {
			setAllDays(allDays);
		}

		Integer remainingDays = (Integer)attributes.get("remainingDays");

		if (remainingDays != null) {
			setRemainingDays(remainingDays);
		}
	}

	@JSON
	@Override
	public long getDayOffCounterId() {
		return _dayOffCounterId;
	}

	@Override
	public void setDayOffCounterId(long dayOffCounterId) {
		_dayOffCounterId = dayOffCounterId;
	}

	@JSON
	@Override
	public long getCompanyId() {
		return _companyId;
	}

	@Override
	public void setCompanyId(long companyId) {
		_companyId = companyId;
	}

	@JSON
	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_userId = userId;
	}

	@Override
	public String getUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getUserId(), "uuid", _userUuid);
	}

	@Override
	public void setUserUuid(String userUuid) {
		_userUuid = userUuid;
	}

	@JSON
	@Override
	public String getUserName() {
		if (_userName == null) {
			return StringPool.BLANK;
		}
		else {
			return _userName;
		}
	}

	@Override
	public void setUserName(String userName) {
		_userName = userName;
	}

	@JSON
	@Override
	public Date getCreateDate() {
		return _createDate;
	}

	@Override
	public void setCreateDate(Date createDate) {
		_createDate = createDate;
	}

	@JSON
	@Override
	public Date getModifiedDate() {
		return _modifiedDate;
	}

	@Override
	public void setModifiedDate(Date modifiedDate) {
		_modifiedDate = modifiedDate;
	}

	@JSON
	@Override
	public long getWorkerUserId() {
		return _workerUserId;
	}

	@Override
	public void setWorkerUserId(long workerUserId) {
		_columnBitmask |= WORKERUSERID_COLUMN_BITMASK;

		if (!_setOriginalWorkerUserId) {
			_setOriginalWorkerUserId = true;

			_originalWorkerUserId = _workerUserId;
		}

		_workerUserId = workerUserId;
	}

	@Override
	public String getWorkerUserUuid() throws SystemException {
		return PortalUtil.getUserValue(getWorkerUserId(), "uuid",
			_workerUserUuid);
	}

	@Override
	public void setWorkerUserUuid(String workerUserUuid) {
		_workerUserUuid = workerUserUuid;
	}

	public long getOriginalWorkerUserId() {
		return _originalWorkerUserId;
	}

	@JSON
	@Override
	public String getWorkerUserName() {
		if (_workerUserName == null) {
			return StringPool.BLANK;
		}
		else {
			return _workerUserName;
		}
	}

	@Override
	public void setWorkerUserName(String workerUserName) {
		_columnBitmask = -1L;

		if (_originalWorkerUserName == null) {
			_originalWorkerUserName = _workerUserName;
		}

		_workerUserName = workerUserName;
	}

	public String getOriginalWorkerUserName() {
		return GetterUtil.getString(_originalWorkerUserName);
	}

	@JSON
	@Override
	public long getRuleId() {
		return _ruleId;
	}

	@Override
	public void setRuleId(long ruleId) {
		_columnBitmask |= RULEID_COLUMN_BITMASK;

		if (!_setOriginalRuleId) {
			_setOriginalRuleId = true;

			_originalRuleId = _ruleId;
		}

		_ruleId = ruleId;
	}

	public long getOriginalRuleId() {
		return _originalRuleId;
	}

	@JSON
	@Override
	public int getYear() {
		return _year;
	}

	@Override
	public void setYear(int year) {
		_columnBitmask |= YEAR_COLUMN_BITMASK;

		if (!_setOriginalYear) {
			_setOriginalYear = true;

			_originalYear = _year;
		}

		_year = year;
	}

	public int getOriginalYear() {
		return _originalYear;
	}

	@JSON
	@Override
	public int getAllDays() {
		return _allDays;
	}

	@Override
	public void setAllDays(int allDays) {
		_columnBitmask |= ALLDAYS_COLUMN_BITMASK;

		if (!_setOriginalAllDays) {
			_setOriginalAllDays = true;

			_originalAllDays = _allDays;
		}

		_allDays = allDays;
	}

	public int getOriginalAllDays() {
		return _originalAllDays;
	}

	@JSON
	@Override
	public int getRemainingDays() {
		return _remainingDays;
	}

	@Override
	public void setRemainingDays(int remainingDays) {
		_columnBitmask |= REMAININGDAYS_COLUMN_BITMASK;

		if (!_setOriginalRemainingDays) {
			_setOriginalRemainingDays = true;

			_originalRemainingDays = _remainingDays;
		}

		_remainingDays = remainingDays;
	}

	public int getOriginalRemainingDays() {
		return _originalRemainingDays;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(getCompanyId(),
			DaysOffCounter.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public DaysOffCounter toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (DaysOffCounter)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		DaysOffCounterImpl daysOffCounterImpl = new DaysOffCounterImpl();

		daysOffCounterImpl.setDayOffCounterId(getDayOffCounterId());
		daysOffCounterImpl.setCompanyId(getCompanyId());
		daysOffCounterImpl.setUserId(getUserId());
		daysOffCounterImpl.setUserName(getUserName());
		daysOffCounterImpl.setCreateDate(getCreateDate());
		daysOffCounterImpl.setModifiedDate(getModifiedDate());
		daysOffCounterImpl.setWorkerUserId(getWorkerUserId());
		daysOffCounterImpl.setWorkerUserName(getWorkerUserName());
		daysOffCounterImpl.setRuleId(getRuleId());
		daysOffCounterImpl.setYear(getYear());
		daysOffCounterImpl.setAllDays(getAllDays());
		daysOffCounterImpl.setRemainingDays(getRemainingDays());

		daysOffCounterImpl.resetOriginalValues();

		return daysOffCounterImpl;
	}

	@Override
	public int compareTo(DaysOffCounter daysOffCounter) {
		int value = 0;

		value = getWorkerUserName().compareTo(daysOffCounter.getWorkerUserName());

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof DaysOffCounter)) {
			return false;
		}

		DaysOffCounter daysOffCounter = (DaysOffCounter)obj;

		long primaryKey = daysOffCounter.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
		DaysOffCounterModelImpl daysOffCounterModelImpl = this;

		daysOffCounterModelImpl._originalWorkerUserId = daysOffCounterModelImpl._workerUserId;

		daysOffCounterModelImpl._setOriginalWorkerUserId = false;

		daysOffCounterModelImpl._originalWorkerUserName = daysOffCounterModelImpl._workerUserName;

		daysOffCounterModelImpl._originalRuleId = daysOffCounterModelImpl._ruleId;

		daysOffCounterModelImpl._setOriginalRuleId = false;

		daysOffCounterModelImpl._originalYear = daysOffCounterModelImpl._year;

		daysOffCounterModelImpl._setOriginalYear = false;

		daysOffCounterModelImpl._originalAllDays = daysOffCounterModelImpl._allDays;

		daysOffCounterModelImpl._setOriginalAllDays = false;

		daysOffCounterModelImpl._originalRemainingDays = daysOffCounterModelImpl._remainingDays;

		daysOffCounterModelImpl._setOriginalRemainingDays = false;

		daysOffCounterModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<DaysOffCounter> toCacheModel() {
		DaysOffCounterCacheModel daysOffCounterCacheModel = new DaysOffCounterCacheModel();

		daysOffCounterCacheModel.dayOffCounterId = getDayOffCounterId();

		daysOffCounterCacheModel.companyId = getCompanyId();

		daysOffCounterCacheModel.userId = getUserId();

		daysOffCounterCacheModel.userName = getUserName();

		String userName = daysOffCounterCacheModel.userName;

		if ((userName != null) && (userName.length() == 0)) {
			daysOffCounterCacheModel.userName = null;
		}

		Date createDate = getCreateDate();

		if (createDate != null) {
			daysOffCounterCacheModel.createDate = createDate.getTime();
		}
		else {
			daysOffCounterCacheModel.createDate = Long.MIN_VALUE;
		}

		Date modifiedDate = getModifiedDate();

		if (modifiedDate != null) {
			daysOffCounterCacheModel.modifiedDate = modifiedDate.getTime();
		}
		else {
			daysOffCounterCacheModel.modifiedDate = Long.MIN_VALUE;
		}

		daysOffCounterCacheModel.workerUserId = getWorkerUserId();

		daysOffCounterCacheModel.workerUserName = getWorkerUserName();

		String workerUserName = daysOffCounterCacheModel.workerUserName;

		if ((workerUserName != null) && (workerUserName.length() == 0)) {
			daysOffCounterCacheModel.workerUserName = null;
		}

		daysOffCounterCacheModel.ruleId = getRuleId();

		daysOffCounterCacheModel.year = getYear();

		daysOffCounterCacheModel.allDays = getAllDays();

		daysOffCounterCacheModel.remainingDays = getRemainingDays();

		return daysOffCounterCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(25);

		sb.append("{dayOffCounterId=");
		sb.append(getDayOffCounterId());
		sb.append(", companyId=");
		sb.append(getCompanyId());
		sb.append(", userId=");
		sb.append(getUserId());
		sb.append(", userName=");
		sb.append(getUserName());
		sb.append(", createDate=");
		sb.append(getCreateDate());
		sb.append(", modifiedDate=");
		sb.append(getModifiedDate());
		sb.append(", workerUserId=");
		sb.append(getWorkerUserId());
		sb.append(", workerUserName=");
		sb.append(getWorkerUserName());
		sb.append(", ruleId=");
		sb.append(getRuleId());
		sb.append(", year=");
		sb.append(getYear());
		sb.append(", allDays=");
		sb.append(getAllDays());
		sb.append(", remainingDays=");
		sb.append(getRemainingDays());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(40);

		sb.append("<model><model-name>");
		sb.append("com.liferay.timetracking.dayoffs.model.DaysOffCounter");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>dayOffCounterId</column-name><column-value><![CDATA[");
		sb.append(getDayOffCounterId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>companyId</column-name><column-value><![CDATA[");
		sb.append(getCompanyId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userId</column-name><column-value><![CDATA[");
		sb.append(getUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>userName</column-name><column-value><![CDATA[");
		sb.append(getUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>createDate</column-name><column-value><![CDATA[");
		sb.append(getCreateDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>modifiedDate</column-name><column-value><![CDATA[");
		sb.append(getModifiedDate());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workerUserId</column-name><column-value><![CDATA[");
		sb.append(getWorkerUserId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>workerUserName</column-name><column-value><![CDATA[");
		sb.append(getWorkerUserName());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>ruleId</column-name><column-value><![CDATA[");
		sb.append(getRuleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>year</column-name><column-value><![CDATA[");
		sb.append(getYear());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>allDays</column-name><column-value><![CDATA[");
		sb.append(getAllDays());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>remainingDays</column-name><column-value><![CDATA[");
		sb.append(getRemainingDays());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = DaysOffCounter.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			DaysOffCounter.class
		};
	private long _dayOffCounterId;
	private long _companyId;
	private long _userId;
	private String _userUuid;
	private String _userName;
	private Date _createDate;
	private Date _modifiedDate;
	private long _workerUserId;
	private String _workerUserUuid;
	private long _originalWorkerUserId;
	private boolean _setOriginalWorkerUserId;
	private String _workerUserName;
	private String _originalWorkerUserName;
	private long _ruleId;
	private long _originalRuleId;
	private boolean _setOriginalRuleId;
	private int _year;
	private int _originalYear;
	private boolean _setOriginalYear;
	private int _allDays;
	private int _originalAllDays;
	private boolean _setOriginalAllDays;
	private int _remainingDays;
	private int _originalRemainingDays;
	private boolean _setOriginalRemainingDays;
	private long _columnBitmask;
	private DaysOffCounter _escapedModel;
}